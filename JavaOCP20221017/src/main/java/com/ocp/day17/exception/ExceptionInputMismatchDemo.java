package com.ocp.day17.exception;

/*
	What is advantage of using try/catch block?   
		
		1. Using one try/catch instead of multiple if statements
		
		
		
	What is disadvantage of using try/catch block?
		
		1. Throwing and catching an exception is an expensive operation compared with most any other primitive operation.
		
		
	What is advantage of using if/else condition:
		
		1. If developer expects the exceptions to be thrown relatively often, developer will be better off with using an if/else for a better performance.
	
	
	Concept of using try-catch block:

		1. The purpose of a try-catch block is to catch and handle an exception generated by working code. 
		   Some exceptions can be handled in a catch block and the problem solved without the exception being rethrown; 
		   however, more often the only thing that you can do is make sure that the appropriate exception is thrown.
		
		2. When the normal path through the code should proceed without error unless there are truly some exceptional conditions
		   E.g., 
		   		-	the server being down
		   		-	credentials being expired or incorrect 	 
		
		3. Developer will probably want to check that the contents of result are what developer expects with control flow logic 
		   rather than just attempting to use data that may NOT be valid for dedveloper's purpose.

	
	Concept of NOT using try-catch block:

		1. Unnecessarily use try-catch block to handle non-exceptional errors
		   E.g.,
		   		-	like the current user not being in the correct role 
		   		-	when developer can reasonably expect and handle an error that is NOT an exceptional condition, developer should do self-check
		
		2. Try/catch block SHALL NOT be used to protect yourself from bad programming
		
		3. Donâ€™t catch fatal exceptions; nothing you can do about them anyway, and trying to generally makes it worse
	
		4. Fix your code so that your programming NEVER triggers a bone-headed exception
		   E.g.,
		   		-	an "IndexOutOfRangeException" should NEVER happen in production code. Developer shall fix it in the first place
		   		
		   		

*/

import java.util.InputMismatchException;   
import java.util.Scanner;
public class ExceptionInputMismatchDemo {
    public static void main(String[] args) {
    	int numerator = 100;
		Integer[] denominator = {10, 0, null};
		Scanner scan = new Scanner(System.in);	
		System.out.print("Please type index of array from denominator: ");    
        // Console 1) w/ try-catch
		/*
			try {
	            int index = scan.nextInt();
	            if(index < 0 || index >= denominator.length) {
	                System.out.println("index out of range of array");
	                return; // terminate the current method 
	            }
	            if(denominator[index] == null) {
	                System.out.println("denominator = null");
	                return; // terminate the current method 
	            }
	            if(denominator[index] == 0) {
	                System.out.println("denominator = 0");
	                return; // terminate the current method 
	            }
	            int result = numerator / denominator[index];
	            System.out.println(result);
	          // InputMismatchException -> NoSuchElementException -> RuntimeException
	        } catch (InputMismatchException e) {	
	        	System.out.println("Because InputMismatchException extends RuntimeException, the thread will NOT be Terminated !!! Continue to run the next programming");
	        	e.printStackTrace();
	        }
			
        */
		
		// Console 2) w/o try-catch
//		/*
	        String string = scan.next(); // transfer to String    
	        // Whether the input string is numeric value or not
	        boolean isNumeric = string.chars().allMatch(Character::isDigit);
	        if(!isNumeric) {
	            System.out.println("Pleas type numeric value");
	            return; // terminate the current method 
	        }
	        int index = Integer.valueOf(string);
			if (index < 0 || index >= denominator.length) {
				System.out.println("index out of range of array");
				return; // terminate the current method 
			}
			if (denominator[index] == null) {
				System.out.println("denominator = null");
				return; // terminate the current method 
			}
			if (denominator[index] == 0) {
				System.out.println("denominator = 0");
				return; // terminate the current method 
			}
			int result = numerator / denominator[index];
			System.out.println(result);  
//		*/  
			
		scan.close();
    }
}


/*
	Console 1):
				Please type index of array from denominator: 0
				10				
				
				Please type index of array from denominator: 1
				denominator = 0
	
				Please type index of array from denominator: 2
				denominator = null
				
				Please type index of array from denominator: 3
				index out of range of array
				
				Please type index of array from denominator: ,./';:][{}\|=+-)(*&^%$#@!~`
				Because InputMismatchException extends RuntimeException, the thread will NOT be Terminated !!! Continue to run the next programming
				java.util.InputMismatchException


	Console 2):
				Please type index of array from denominator: 0
				10
				
				Please type index of array from denominator: 1
				denominator = 0
	
				Please type index of array from denominator: 2
				denominator = null
				
				Please type index of array from denominator: 3
				index out of range of array
	
				Please type index of array from denominator: ,./';:][{}\|=+-)(*&^%$#@!~`
				Pleas type numeric value
		
*/