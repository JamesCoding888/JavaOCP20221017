package com.ocp.day17.exception.inputmismatch;

/******************************************************************************************************************************************************************
 	
	What is advantage of using if/else condition:
		
		1. If developer expects the exceptions to be thrown relatively often, developer will be better off with using an if/else condition for a better performance.
		
		2. if/else condition allows the program to make decisions and take different actions based on the outcome of a certain condition. 
		   This allows the program to adapt to different inputs and situations, and make decisions on how to proceed.
		   
		   E.g., A program that checks the temperature of a room may use an if/else condition to determine whether to turn on the air conditioner or the heater. 
		         If the temperature is below a certain threshold, the program would turn on the heater, and if the temperature is above a certain threshold, 
		         the program would turn on the air conditioner.

		3. if/else condition makes the code more readable by clearly outlining different scenarios and the corresponding actions. 
		   This makes it easier to understand the logic behind the program and to debug any issues that may arise.


	What is disadvantage of using if/else condition:

		1. Complexity: 
		   When there are many conditions to check, the code can become complex and difficult to understand and maintain. 
		   This is especially true if the conditions are nested within other conditions, making it hard to follow the flow of the program.

		2. Repetition: 
		   If the same condition or set of conditions is used in multiple places in the code, it can lead to repetition and make the code less maintainable.

		3. Hard to test: 
		   If the conditions are complex and the code has many branches, it can be difficult to test all possible scenarios and make sure that the code is working correctly.

		4. Error-prone: 
		   If the conditions are not written correctly, it can lead to errors or unexpected behavior in the program, which can be difficult to detect and fix.

		5. Limited expressiveness: 
		   In some cases, if/else conditions can be limited in their expressiveness and the program logic can become hard to follow, this is where functional programming paradigm 
		   can be more expressive and can help to solve this problem.
	
******************************************************************************************************************************************************************
 	
	Concept of using try-catch block:

		1. The purpose of a try-catch block is to catch and handle an exception generated by working code. 
		   Some exceptions CAN be handled in a catch block and the problem solved without the exception being re-thrown; 
		   however, more often the only thing that you can do is make sure that the appropriate exception is thrown.
		
		2. When the normal path through the code should proceed without error unless there are truly some exceptional conditions
		   E.g., 
		   		-	the server being down
		   		-	credentials being expired or incorrect 	 
		
		3. Developer will probably want to check that the contents of result are what developer expects with control flow logic 
		   rather than just attempting to use data that may NOT be valid for dedveloper's purpose.

	
	Concept of NOT using try-catch block:

		1. Unnecessarily use try-catch block to handle non-exceptional errors
		   E.g.,
		   		-	like the current user not being in the correct role 
		   		-	when developer can reasonably expect and handle an error that is NOT an exceptional condition, developer should do self-check
		
		2. Try/catch block SHALL NOT be used to protect yourself from bad programming
		
		3. Fix your code so that your programming NEVER triggers a bone-headed exception
		   E.g.,
		   		-	an "IndexOutOfBoundsException" should NEVER happen in production code. Developer shall fix it in the first place
		   			Let's see the IndexOutOfRangeExceptionDemo.java at package of "com.ocp.day17.exception.runtimeexception"
		   		
		4. Donâ€™t catch fatal exceptions; nothing you can do about them anyway, and trying to generally makes it worse
		   So, what is fatal exception? A fatal exception is a type of error that occurs when a program is running, and it's NOT able to continue and typically terminate, 
		   and then the OS (Operating System) will display an error message. 
		   
		   E.g., Please see the image of "Fatal_Exception.png" at the package of "com.ocp.day17.exception.fatalexception" 
		         and also the link here - https://www.computerhope.com/issues/ch000223.htm
	      
	       Fatal Exception can be caused by a variety of issues: 
		   e.g., 
		       	1) an invalid instruction in a program's code
		   		2) an attempt to access an illegal memory location  
	    		3) a failure to allocate enough memory for a program to run 	
	       
	       Above of all issues of fatal exception, we do NOT sure of when programming will be terminated or allocated memory will be lost/insufficient;
	       therefore, nothing you can do about them anyway. 
	
 ******************************************************************************************************************************************************************
 		   			
	What is advantage of using try/catch block? 
		
		1. The main advantage of using try/catch blocks is that they allow a program to handle errors or exceptions in a structured and organized way, 
		   rather than allowing them to crash the program.

		2. When a program encounters an error or exception within a try block, it immediately transfers control to the corresponding catch block where the error can be handled. 
		   This can include things like logging the error, displaying an error message to the user, or attempting to recover from the error and continue executing the program.

		3. Using try/catch block, it makes it easy to separate error-handling code from the main logic of the program. 
		   This makes the code more readable and maintainable, as well as helps to avoid cluttering the main logic with error-handling code.

		4. Using try/catch block, it can also be used to handle specific types of exceptions, allowing to handle different types of errors differently.
				
		
	What is disadvantage of using try/catch block?
		
		1. Throwing and catching an exception is an expensive operation compared with most any other primitive operation 
		   (e.g., primitive type: byte, short, int, long, float and double)
		
		2. Performance overhead: 
		   When an exception is thrown, the program has to search for the corresponding catch block, which can slow down the program's execution.

		3. Complexity: 
		   Using try/catch block can make the code more complex, especially if there are multiple nested try/catch block or if the code is handling multiple types of exceptions. 
		   This can make the code harder to read and understand, and more difficult to debug.

	    4. Overuse: 
	       If try/catch block are used excessively, it can make the code more difficult to follow and understand, and can also make it hard to determine where an error occurred.

		5. Masking errors: 
		   If the catch block simply "swallows" the exception and continues execution without providing any feedback, it could mask the error and make it harder to detect and fix later.

		6. Misuse: 
		   If try/catch block are used in situations where they are not appropriate, it can lead to poor error handling and can make the program more likely to crash or behave in unexpected ways.
		
 
	Summary of try/catch block:
		
		1. It's important to use try/catch block judiciously and in appropriate situations, to make a balance of advantages and disadvantages of using try/catch block. 
		
		2. A good practice is to have a clear strategy for handling exceptions, and make sure to always include a meaningful error message or log, to facilitate debugging 
		   and maintenance of the code.

		   		
		   		
 ******************************************************************************************************************************************************************/

import java.util.InputMismatchException;   
import java.util.Scanner;
public class ExceptionInputMismatchDemo {
    public static void main(String[] args) {
    	int numerator = 100;
		Integer[] denominator = {10, 0, null};
		Scanner scan = new Scanner(System.in);	
		System.out.print("Please type index of array from denominator: ");    
        // Console 1) w/ try-catch
		/*
			try {
	            int index = scan.nextInt();
	            if(index < 0 || index >= denominator.length) {
	                System.out.println("index out of range of array");
	                return; // terminate the current method 
	            }
	            if(denominator[index] == null) {
	                System.out.println("denominator = null");
	                return; // terminate the current method 
	            }
	            if(denominator[index] == 0) {
	                System.out.println("denominator = 0");
	                return; // terminate the current method 
	            }
	            int result = numerator / denominator[index];
	            System.out.println(result);
	          // InputMismatchException -> NoSuchElementException -> RuntimeException
	        } catch (InputMismatchException e) {	
	        	System.out.println("Because InputMismatchException extends RuntimeException, the thread will NOT be Terminated !!! Continue to run the next programming");
	        	e.printStackTrace();
	        }
			
        */
		
		// Console 2) w/o try-catch
//		/*
	        String string = scan.next(); // transfer to String    
	        // Whether the input string is numeric value or not
	        boolean isNumeric = string.chars().allMatch(Character::isDigit);
	        if(!isNumeric) {
	            System.out.println("Pleas type numeric value");
	            return; // terminate the current method 
	        }
	        int index = Integer.valueOf(string);
			if (index < 0 || index >= denominator.length) {
				System.out.println("index out of range of array");
				return; // terminate the current method 
			}
			if (denominator[index] == null) {
				System.out.println("denominator = null");
				return; // terminate the current method 
			}
			if (denominator[index] == 0) {
				System.out.println("denominator = 0");
				return; // terminate the current method 
			}
			int result = numerator / denominator[index];
			System.out.println(result);  
//		*/  
			
		scan.close();
    }
}


/*
	Console 1):
				Please type index of array from denominator: 0
				10				
				
				Please type index of array from denominator: 1
				denominator = 0
	
				Please type index of array from denominator: 2
				denominator = null
				
				Please type index of array from denominator: 3
				index out of range of array
				
				Please type index of array from denominator: ,./';:][{}\|=+-)(*&^%$#@!~`
				Because InputMismatchException extends RuntimeException, the thread will NOT be Terminated !!! Continue to run the next programming
				java.util.InputMismatchException


	Console 2):
				Please type index of array from denominator: 0
				10
				
				Please type index of array from denominator: 1
				denominator = 0
	
				Please type index of array from denominator: 2
				denominator = null
				
				Please type index of array from denominator: 3
				index out of range of array
	
				Please type index of array from denominator: ,./';:][{}\|=+-)(*&^%$#@!~`
				Pleas type numeric value
		
*/