package com.ocp.day17.exception.inputmismatch;

/******************************************************************************************************************************************************************
	
Advantages of Using `if/else` Conditions:

	1. **Performance**: 
	   If exceptions are expected to be thrown frequently, using `if/else` conditions can provide better performance compared to exception handling.

	2. **Decision-Making**: 
	   `if/else` conditions allow the program to adapt based on the outcome of certain conditions, enabling dynamic decisions.
	   
	   Example: 
	   A program checking room temperature can use an `if/else` condition to decide whether to turn on the air conditioner or heater. 
	   If the temperature is below a threshold, the heater is activated, and if it is above the threshold, the air conditioner is turned on.

	3. **Readability**: 
	   `if/else` conditions improve code readability by outlining different scenarios and the corresponding actions, making it easier to understand the program's logic 
	   and debug issues.

Disadvantages of Using `if/else` Conditions:

	1. **Complexity**: 
	   As the number of conditions increases, the code can become difficult to maintain, especially with nested conditions.

	2. **Repetition**: 
	   Reusing the same conditions in multiple places leads to code repetition, making it less maintainable.

	3. **Testing Difficulty**: 
	   Complex conditions and multiple branches can make it challenging to test all possible scenarios and ensure correctness.

	4. **Error-Prone**: 
	   Incorrect conditions can lead to unexpected behavior, which may be hard to detect and fix.

	5. **Limited Expressiveness**: 
	   `if/else` logic can become difficult to follow, and functional programming paradigms may provide more expressive alternatives.
	
******************************************************************************************************************************************************************

Concept of Using `try-catch` Block:

	1. **Purpose**: 
	   The primary purpose of a `try-catch` block is to handle exceptions generated by code. While some exceptions can be resolved in the catch block, often it's best to 
	   ensure that appropriate exceptions are thrown and handled properly.

	2. **Exceptional Conditions**: 
	   `try-catch` blocks should handle truly exceptional conditions, like:
	   	- A server being down.
	   	- Expired or incorrect credentials.
		
	3. **Control Flow Logic**: 
	   It is advisable to check the validity of data (e.g., response contents) through control flow logic before using it.

Concept of Not Using `try-catch` Block:

	1. **Handling Non-Exceptional Errors**: 
	   Avoid using `try-catch` to handle predictable errors, such as:
	   	- A user not having the correct role.
	   	- These should be handled with pre-checks instead of relying on exceptions.
	   
	2. **Avoiding Poor Practices**: 
	   Do not use `try-catch` to mask poor programming practices. Ensure that code is designed to avoid "bone-headed" exceptions like `IndexOutOfBoundsException`.

	3. **Fatal Exceptions**: 
	   Fatal exceptions, such as invalid memory access, cannot be recovered from, and handling them often worsens the situation. 
	   Example: Refer to `Fatal_Exception.png` and the provided link for more details on fatal exceptions.

Advantages of Using `try-catch` Block:

	1. **Structured Error Handling**: 
	   `try-catch` blocks provide a structured way to handle errors, preventing them from crashing the program.

	2. **Immediate Error Handling**: 
	   When an exception occurs, control is immediately transferred to the appropriate catch block, enabling error handling, such as logging or recovery.

	3. **Separation of Concerns**: 
	   Error-handling logic is separated from the main logic, enhancing readability and maintainability.

	4. **Specific Exception Handling**: 
	   `try-catch` blocks can handle specific types of exceptions, allowing differentiated error handling for various scenarios.

Disadvantages of Using `try-catch` Block:

	1. **Performance Cost**: 
	   Throwing and catching exceptions is more expensive than primitive operations.

	2. **Performance Overhead**: 
	   Searching for the corresponding catch block introduces execution overhead when an exception is thrown.

	3. **Complexity**: 
	   Nested or multiple `try-catch` blocks increase complexity, making the code harder to read and debug.

	4. **Overuse**: 
	   Excessive use of `try-catch` blocks clutters code and complicates error tracking.

	5. **Error Masking**: 
	   Simply swallowing exceptions without feedback can mask errors, making them harder to detect and fix.

	6. **Misuse**: 
	   Inappropriate use of `try-catch` blocks may lead to poor error handling, increasing the likelihood of crashes or unexpected behavior.

Summary of `try-catch` Block:

	1. **Judicious Use**: 
	   Use `try-catch` blocks judiciously and appropriately, balancing the advantages and disadvantages.

	2. **Clear Strategy**: 
	   Always include meaningful error messages or logs to aid in debugging and maintaining the code.

******************************************************************************************************************************************************************/
import java.util.InputMismatchException;   
import java.util.Scanner;
public class ExceptionInputMismatchDemo {
    public static void main(String[] args) {
    	int numerator = 100;
		Integer[] denominator = {10, 0, null};
		Scanner scan = new Scanner(System.in);	
		System.out.print("Please type index of array from denominator: ");    
        // Console 1) w/ try-catch
		/*
			try {
	            int index = scan.nextInt();
	            if(index < 0 || index >= denominator.length) {
	                System.out.println("index out of range of array");
	                return; // terminate the current method 
	            }
	            if(denominator[index] == null) {
	                System.out.println("denominator = null");
	                return; // terminate the current method 
	            }
	            if(denominator[index] == 0) {
	                System.out.println("denominator = 0");
	                return; // terminate the current method 
	            }
	            int result = numerator / denominator[index];
	            System.out.println(result);
	          // InputMismatchException -> NoSuchElementException -> RuntimeException
	        } catch (InputMismatchException e) {	
	        	System.out.println("Because InputMismatchException extends RuntimeException, the thread will NOT be Terminated !!! Continue to run the next programming");
	        	e.printStackTrace();
	        }
			
        */
		
		// Console 2) w/o try-catch
//		/*
	        String string = scan.next(); // transfer to String    
	        // Whether the input string is numeric value or not
	        boolean isNumeric = string.chars().allMatch(Character::isDigit);
	        if(!isNumeric) {
	            System.out.println("Pleas type numeric value");
	            return; // terminate the current method 
	        }
	        int index = Integer.valueOf(string);
			if (index < 0 || index >= denominator.length) {
				System.out.println("index out of range of array");
				return; // terminate the current method 
			}
			if (denominator[index] == null) {
				System.out.println("denominator = null");
				return; // terminate the current method 
			}
			if (denominator[index] == 0) {
				System.out.println("denominator = 0");
				return; // terminate the current method 
			}
			int result = numerator / denominator[index];
			System.out.println(result);  
//		*/  
			
		scan.close();
    }
}


/*
	Console 1):
				Please type index of array from denominator: 0
				10				
				
				Please type index of array from denominator: 1
				denominator = 0
	
				Please type index of array from denominator: 2
				denominator = null
				
				Please type index of array from denominator: 3
				index out of range of array
				
				Please type index of array from denominator: ,./';:][{}\|=+-)(*&^%$#@!~`
				Because InputMismatchException extends RuntimeException, the thread will NOT be Terminated !!! Continue to run the next programming
				java.util.InputMismatchException


	Console 2):
				Please type index of array from denominator: 0
				10
				
				Please type index of array from denominator: 1
				denominator = 0
	
				Please type index of array from denominator: 2
				denominator = null
				
				Please type index of array from denominator: 3
				index out of range of array
	
				Please type index of array from denominator: ,./';:][{}\|=+-)(*&^%$#@!~`
				Pleas type numeric value
		
*/