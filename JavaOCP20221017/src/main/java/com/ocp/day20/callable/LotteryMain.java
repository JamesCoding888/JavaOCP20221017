package com.ocp.day20.callable;
/*
 	
	1) ExecutionException:  
	
	   It is a checked exception that is thrown when an exception occurs during the execution of a task in a java.util.concurrent framework,
	   such as ExecutorService. It is a subclass of Exception and implements the Serializable interface.
	
	2) InterruptedException:
	   
	   It is an exception that is thrown when a thread is interrupted while it is waiting, sleeping, or blocking for some operation to complete. 
	   It is a subclass of Exception, but not of ExecutionException.
	
	3) While ExecutionException and InterruptedException are NOT related through inheritance, they are both commonly used in multi-threaded programming in Java to handle exceptions related to concurrent execution.
	
	4) Following explanation of programs:
	
	   The program is an example of using a FutureTask with a Callable to generate a set of random numbers as "Lucky Balls" for a lottery game.

	   The main method creates an instance of the Lottery class, which implements the Callable interface, and passes it to a new FutureTask. A new thread is created to run the FutureTask and generate the set of lucky balls.

	   The program then prints a message to indicate that the system is starting up, and waits for the FutureTask to complete by calling its get() method. This method will block until the task is complete, and will return the set of lucky balls generated by the Callable.

	   If an exception occurs during the execution of the task, either an InterruptedException or ExecutionException can be thrown. Both exceptions are caught in the catch block, and their stack traces are printed to the console.
	
*/
import java.util.Set;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.FutureTask;

public class LotteryMain {

	public static void main(String[] args) {
		Lottery lottery = new Lottery();
		FutureTask<Set<Integer>> futureTask = new FutureTask<>(lottery);
		Thread thread4LuckyBall = new Thread(futureTask);
		thread4LuckyBall.start();
		
		System.out.println("Let's start up the System of Lucky Ball");
		
		try {
			System.out.printf("Lucky Balls: %s", futureTask.get());
		} catch (InterruptedException | ExecutionException e) { // Both of exceptions are irrelated inheritance
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}

/*
	Console:
				Let's start up the System of Lucky Ball
				Lucky Balls: [33, 10, 30, 4, 37, 38]
*/